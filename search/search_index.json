{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Portfolio tracker [Python] Install dependencies poetry install Poetry To install all packages poetry install To add new package poetry add <package-name> # or poetry add --dev <package-name> To go into poetry shell poetry shell To get help poetry --help Poetry Docs: https://python-poetry.org/ Run project The recommended way to run the project is using ddot . First install ddot using pipx pipx install ddot # OR pip install ddot And later on run ddot run on the shell. It should prompt you a list of all the things it can do in this project. Just select those which you want. All the commands are described in the devfile.toml file. Development mode ddot run -m dev # OR python3 -m portfolio_tracker Production mode ddot run -m deploy Help python3 -m portfolio_tracker --help API docs API docs are available at ReDoc is the default. SwaggerUI is also available. ReDoc http://localhost:5000/api Swagger UI http://localhost:5000/api/swagger Support for .env files .env files are supported. Also stage based env files are also supported. Stages supported: Development Production Also includes support for .local files as well. .local files have the higher priority over the non local files. Supported files: .env.development.local .env.development .env.production.local .env.production .env.local .env Env files priority order ENV values These variables will always be opposite of the PRODUCTION_ENV variable. SERVER_RELOAD DEBUG Even though they are part of the BaseSettings their value will always be overridden by the above logic. Testing Isolated testing tox Testing once pytest TDD pytest-watch Type checking mypy Linting, typechecking all at once tox -e check Installing Pre commit hook pre-commit install","title":"Home"},{"location":"#portfolio-tracker-python","text":"","title":"Portfolio tracker [Python]"},{"location":"#install-dependencies","text":"poetry install","title":"Install dependencies"},{"location":"#poetry","text":"","title":"Poetry"},{"location":"#to-install-all-packages","text":"poetry install","title":"To install all packages"},{"location":"#to-add-new-package","text":"poetry add <package-name> # or poetry add --dev <package-name>","title":"To add new package"},{"location":"#to-go-into-poetry-shell","text":"poetry shell","title":"To go into poetry shell"},{"location":"#to-get-help","text":"poetry --help Poetry Docs: https://python-poetry.org/","title":"To get help"},{"location":"#run-project","text":"The recommended way to run the project is using ddot . First install ddot using pipx pipx install ddot # OR pip install ddot And later on run ddot run on the shell. It should prompt you a list of all the things it can do in this project. Just select those which you want. All the commands are described in the devfile.toml file.","title":"Run project"},{"location":"#development-mode","text":"ddot run -m dev # OR python3 -m portfolio_tracker","title":"Development mode"},{"location":"#production-mode","text":"ddot run -m deploy","title":"Production mode"},{"location":"#help","text":"python3 -m portfolio_tracker --help","title":"Help"},{"location":"#api-docs","text":"API docs are available at ReDoc is the default. SwaggerUI is also available.","title":"API docs"},{"location":"#redoc","text":"http://localhost:5000/api","title":"ReDoc"},{"location":"#swagger-ui","text":"http://localhost:5000/api/swagger","title":"Swagger UI"},{"location":"#support-for-env-files","text":".env files are supported. Also stage based env files are also supported. Stages supported: Development Production Also includes support for .local files as well. .local files have the higher priority over the non local files. Supported files: .env.development.local .env.development .env.production.local .env.production .env.local .env Env files priority order","title":"Support for .env files"},{"location":"#env-values","text":"These variables will always be opposite of the PRODUCTION_ENV variable. SERVER_RELOAD DEBUG Even though they are part of the BaseSettings their value will always be overridden by the above logic.","title":"ENV values"},{"location":"#testing","text":"","title":"Testing"},{"location":"#isolated-testing","text":"tox","title":"Isolated testing"},{"location":"#testing-once","text":"pytest","title":"Testing once"},{"location":"#tdd","text":"pytest-watch","title":"TDD"},{"location":"#type-checking","text":"mypy","title":"Type checking"},{"location":"#linting-typechecking-all-at-once","text":"tox -e check","title":"Linting, typechecking all at once"},{"location":"#installing-pre-commit-hook","text":"pre-commit install","title":"Installing Pre commit hook"},{"location":"docs/about/","text":"Hello","title":"About"},{"location":"reference/portfolio_tracker/","text":"Module portfolio_tracker Sub-modules portfolio_tracker.api portfolio_tracker.core portfolio_tracker.crud portfolio_tracker.db portfolio_tracker.models portfolio_tracker.schema portfolio_tracker.utils","title":"Index"},{"location":"reference/portfolio_tracker/#module-portfolio_tracker","text":"","title":"Module portfolio_tracker"},{"location":"reference/portfolio_tracker/#sub-modules","text":"portfolio_tracker.api portfolio_tracker.core portfolio_tracker.crud portfolio_tracker.db portfolio_tracker.models portfolio_tracker.schema portfolio_tracker.utils","title":"Sub-modules"},{"location":"reference/portfolio_tracker/crud/","text":"Module portfolio_tracker.crud","title":"Crud"},{"location":"reference/portfolio_tracker/crud/#module-portfolio_trackercrud","text":"","title":"Module portfolio_tracker.crud"},{"location":"reference/portfolio_tracker/db/","text":"Module portfolio_tracker.db","title":"Db"},{"location":"reference/portfolio_tracker/db/#module-portfolio_trackerdb","text":"","title":"Module portfolio_tracker.db"},{"location":"reference/portfolio_tracker/models/","text":"Module portfolio_tracker.models","title":"Models"},{"location":"reference/portfolio_tracker/models/#module-portfolio_trackermodels","text":"","title":"Module portfolio_tracker.models"},{"location":"reference/portfolio_tracker/schema/","text":"Module portfolio_tracker.schema","title":"Schema"},{"location":"reference/portfolio_tracker/schema/#module-portfolio_trackerschema","text":"","title":"Module portfolio_tracker.schema"},{"location":"reference/portfolio_tracker/utils/","text":"Module portfolio_tracker.utils","title":"Utils"},{"location":"reference/portfolio_tracker/utils/#module-portfolio_trackerutils","text":"","title":"Module portfolio_tracker.utils"},{"location":"reference/portfolio_tracker/api/","text":"Module portfolio_tracker.api View Source from .v1 import api as api_v1 Sub-modules portfolio_tracker.api.v1","title":"Index"},{"location":"reference/portfolio_tracker/api/#module-portfolio_trackerapi","text":"View Source from .v1 import api as api_v1","title":"Module portfolio_tracker.api"},{"location":"reference/portfolio_tracker/api/#sub-modules","text":"portfolio_tracker.api.v1","title":"Sub-modules"},{"location":"reference/portfolio_tracker/api/v1/","text":"Module portfolio_tracker.api.v1 Sub-modules portfolio_tracker.api.v1.api portfolio_tracker.api.v1.endpoints","title":"Index"},{"location":"reference/portfolio_tracker/api/v1/#module-portfolio_trackerapiv1","text":"","title":"Module portfolio_tracker.api.v1"},{"location":"reference/portfolio_tracker/api/v1/#sub-modules","text":"portfolio_tracker.api.v1.api portfolio_tracker.api.v1.endpoints","title":"Sub-modules"},{"location":"reference/portfolio_tracker/api/v1/api/","text":"Module portfolio_tracker.api.v1.api View Source from fastapi import APIRouter from .endpoints import demo api_router = APIRouter () api_router . include_router ( demo . router , prefix = \"/demo\" , tags = [ \"Demo\" ]) Variables api_router","title":"API"},{"location":"reference/portfolio_tracker/api/v1/api/#module-portfolio_trackerapiv1api","text":"View Source from fastapi import APIRouter from .endpoints import demo api_router = APIRouter () api_router . include_router ( demo . router , prefix = \"/demo\" , tags = [ \"Demo\" ])","title":"Module portfolio_tracker.api.v1.api"},{"location":"reference/portfolio_tracker/api/v1/api/#variables","text":"api_router","title":"Variables"},{"location":"reference/portfolio_tracker/api/v1/endpoints/","text":"Module portfolio_tracker.api.v1.endpoints Sub-modules portfolio_tracker.api.v1.endpoints.demo portfolio_tracker.api.v1.endpoints.utils","title":"Index"},{"location":"reference/portfolio_tracker/api/v1/endpoints/#module-portfolio_trackerapiv1endpoints","text":"","title":"Module portfolio_tracker.api.v1.endpoints"},{"location":"reference/portfolio_tracker/api/v1/endpoints/#sub-modules","text":"portfolio_tracker.api.v1.endpoints.demo portfolio_tracker.api.v1.endpoints.utils","title":"Sub-modules"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/","text":"Module portfolio_tracker.api.v1.endpoints.demo View Source from typing import Any from fastapi import APIRouter from pydantic import BaseModel router = APIRouter () class HelloWorld ( BaseModel ): hello : str @router.get ( \"/\" , response_model = HelloWorld ) def get_hello_world () -> Any : \"\"\" Hello world \"\"\" return { \"hello\" : \"world\" } Variables router Functions get_hello_world def get_hello_world ( ) -> Any Hello world View Source @router . get ( \"/\" , response_model = HelloWorld ) def get_hello_world () -> Any : \"\"\" Hello world \"\"\" return { \"hello\" : \"world\" } Classes HelloWorld class HelloWorld ( __pydantic_self__ , ** data : Any ) View Source class HelloWorld ( BaseModel ): hello: str Ancestors (in MRO) pydantic.main.BaseModel pydantic.utils.Representation Descendants pydantic.main.HelloWorld pydantic.main.HelloWorld Class variables Config Static methods construct def construct ( _fields_set : Union [ ForwardRef ( 'SetStr' ), NoneType ] = None , ** values : Any ) -> 'Model' Creates a new model setting dict and fields_set from trusted or pre-validated data. Default values are respected, but no other validation is performed. from_orm def from_orm ( obj : Any ) -> 'Model' parse_file def parse_file ( path : Union [ str , pathlib . Path ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model' parse_obj def parse_obj ( obj : Any ) -> 'Model' parse_raw def parse_raw ( b : Union [ str , bytes ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model' schema def schema ( by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' ) -> 'DictStrAny' schema_json def schema_json ( * , by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' , ** dumps_kwargs : Any ) -> 'unicode' update_forward_refs def update_forward_refs ( ** localns : Any ) -> None Try to update ForwardRefs on fields based on this Model, globalns and localns. validate def validate ( value : Any ) -> 'Model' Instance variables fields Methods copy def copy ( self : 'Model' , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , update : 'DictStrAny' = None , deep : bool = False ) -> 'Model' Duplicate a model, optionally choose which fields to include, exclude and change. :param include: fields to include in new model :param exclude: fields to exclude from new model, as with values this takes precedence over include :param update: values to change/add in the new model. Note: the data is not validated before creating the new model: you should trust this data :param deep: set to True to make a deep copy of the model :return: new model instance dict def dict ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False ) -> 'DictStrAny' Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. json def json ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False , encoder : Union [ Callable [[ Any ], Any ], NoneType ] = None , ** dumps_kwargs : Any ) -> 'unicode' Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . to_string def to_string ( self , pretty : bool = False ) -> 'unicode'","title":"Demo"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#module-portfolio_trackerapiv1endpointsdemo","text":"View Source from typing import Any from fastapi import APIRouter from pydantic import BaseModel router = APIRouter () class HelloWorld ( BaseModel ): hello : str @router.get ( \"/\" , response_model = HelloWorld ) def get_hello_world () -> Any : \"\"\" Hello world \"\"\" return { \"hello\" : \"world\" }","title":"Module portfolio_tracker.api.v1.endpoints.demo"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#variables","text":"router","title":"Variables"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#functions","text":"","title":"Functions"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#get_hello_world","text":"def get_hello_world ( ) -> Any Hello world View Source @router . get ( \"/\" , response_model = HelloWorld ) def get_hello_world () -> Any : \"\"\" Hello world \"\"\" return { \"hello\" : \"world\" }","title":"get_hello_world"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#classes","text":"","title":"Classes"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#helloworld","text":"class HelloWorld ( __pydantic_self__ , ** data : Any ) View Source class HelloWorld ( BaseModel ): hello: str","title":"HelloWorld"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#ancestors-in-mro","text":"pydantic.main.BaseModel pydantic.utils.Representation","title":"Ancestors (in MRO)"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#descendants","text":"pydantic.main.HelloWorld pydantic.main.HelloWorld","title":"Descendants"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#class-variables","text":"Config","title":"Class variables"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#static-methods","text":"","title":"Static methods"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#construct","text":"def construct ( _fields_set : Union [ ForwardRef ( 'SetStr' ), NoneType ] = None , ** values : Any ) -> 'Model' Creates a new model setting dict and fields_set from trusted or pre-validated data. Default values are respected, but no other validation is performed.","title":"construct"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#from_orm","text":"def from_orm ( obj : Any ) -> 'Model'","title":"from_orm"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#parse_file","text":"def parse_file ( path : Union [ str , pathlib . Path ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model'","title":"parse_file"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#parse_obj","text":"def parse_obj ( obj : Any ) -> 'Model'","title":"parse_obj"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#parse_raw","text":"def parse_raw ( b : Union [ str , bytes ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model'","title":"parse_raw"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#schema","text":"def schema ( by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' ) -> 'DictStrAny'","title":"schema"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#schema_json","text":"def schema_json ( * , by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' , ** dumps_kwargs : Any ) -> 'unicode'","title":"schema_json"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#update_forward_refs","text":"def update_forward_refs ( ** localns : Any ) -> None Try to update ForwardRefs on fields based on this Model, globalns and localns.","title":"update_forward_refs"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#validate","text":"def validate ( value : Any ) -> 'Model'","title":"validate"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#instance-variables","text":"fields","title":"Instance variables"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#methods","text":"","title":"Methods"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#copy","text":"def copy ( self : 'Model' , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , update : 'DictStrAny' = None , deep : bool = False ) -> 'Model' Duplicate a model, optionally choose which fields to include, exclude and change. :param include: fields to include in new model :param exclude: fields to exclude from new model, as with values this takes precedence over include :param update: values to change/add in the new model. Note: the data is not validated before creating the new model: you should trust this data :param deep: set to True to make a deep copy of the model :return: new model instance","title":"copy"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#dict","text":"def dict ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False ) -> 'DictStrAny' Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.","title":"dict"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#json","text":"def json ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False , encoder : Union [ Callable [[ Any ], Any ], NoneType ] = None , ** dumps_kwargs : Any ) -> 'unicode' Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() .","title":"json"},{"location":"reference/portfolio_tracker/api/v1/endpoints/demo/#to_string","text":"def to_string ( self , pretty : bool = False ) -> 'unicode'","title":"to_string"},{"location":"reference/portfolio_tracker/api/v1/endpoints/utils/","text":"Module portfolio_tracker.api.v1.endpoints.utils","title":"Utils"},{"location":"reference/portfolio_tracker/api/v1/endpoints/utils/#module-portfolio_trackerapiv1endpointsutils","text":"","title":"Module portfolio_tracker.api.v1.endpoints.utils"},{"location":"reference/portfolio_tracker/core/","text":"Module portfolio_tracker.core Sub-modules portfolio_tracker.core.config","title":"Index"},{"location":"reference/portfolio_tracker/core/#module-portfolio_trackercore","text":"","title":"Module portfolio_tracker.core"},{"location":"reference/portfolio_tracker/core/#sub-modules","text":"portfolio_tracker.core.config","title":"Sub-modules"},{"location":"reference/portfolio_tracker/core/config/","text":"Module portfolio_tracker.core.config View Source from pydantic import BaseModel , AnyHttpUrl , validator from typing import List , Union import os from dotenv import dotenv_values class Settings ( BaseModel ): PRODUCTION_ENV : bool = False PROJECT_NAME : str = \"Python Baseline\" DEBUG : bool = True VERSION : str = \"v0.1.0\" API_V1_STR : str = \"/api/v1\" API_DOC : str = \"/api\" API_SWAGGER_URL : str = \"/api/swagger\" API_REDOC_URL : str = \"/api/redoc\" SERVER_HOST : str = \"0.0.0.0\" SERVER_PORT : int = 5000 SERVER_RELOAD : bool = True # BACKEND_CORS_ORIGINS is a JSON-formatted list of origins # e.g: '[\"http://localhost\", \"http://localhost:4200\", \"http://localhost:3000\", \\ # \"http://localhost:8080\", \"http://local.dockertoolbox.tiangolo.com\"]' BACKEND_CORS_ORIGINS : List [ AnyHttpUrl ] = [] @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str , List [ str ]]) -> Union [ List [ str ], str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ): return [ i . strip () for i in v . split ( \",\" )] elif isinstance ( v , ( list , str )): return v raise ValueError ( v ) def get_settings (): def check_debug (): if settings . PRODUCTION_ENV : return False return True config = { ** os . environ , ** dotenv_values ( \".env\" )} dev_env = [ \".env.development\" , \".env.local\" , \".env.development.local\" ] prod_env = [ \".env.production\" , \".env.local\" , \".env.production.local\" ] is_prod_env = config . get ( \"PRODUCTION_ENV\" , \"False\" ) == \"True\" for i in prod_env if is_prod_env else dev_env : config = { ** config , ** dotenv_values ( i )} settings = Settings ( ** config ) settings . DEBUG = check_debug () settings . SERVER_RELOAD = check_debug () return settings settings = get_settings () def set_env ( key : str , value : str ): os . environ [ key ] = value Variables settings Functions get_settings def get_settings ( ) View Source def get_settings (): def check_debug (): if settings . PRODUCTION_ENV : return False return True config = { ** os . environ , ** dotenv_values ( \".env\" ) } dev_env = [ \".env.development\" , \".env.local\" , \".env.development.local\" ] prod_env = [ \".env.production\" , \".env.local\" , \".env.production.local\" ] is_prod_env = config . get ( \"PRODUCTION_ENV\" , \"False\" ) == \"True\" for i in prod_env if is_prod_env else dev_env : config = { ** config , ** dotenv_values ( i ) } settings = Settings ( ** config ) settings . DEBUG = check_debug () settings . SERVER_RELOAD = check_debug () return settings set_env def set_env ( key : str , value : str ) View Source def set_env ( key : str , value : str ) : os . environ [ key ] = value Classes Settings class Settings ( __pydantic_self__ , ** data : Any ) View Source class Settings ( BaseModel ) : PRODUCTION_ENV : bool = False PROJECT_NAME : str = \"Python Baseline\" DEBUG : bool = True VERSION : str = \"v0.1.0\" API_V1_STR : str = \"/api/v1\" API_DOC : str = \"/api\" API_SWAGGER_URL : str = \"/api/swagger\" API_REDOC_URL : str = \"/api/redoc\" SERVER_HOST : str = \"0.0.0.0\" SERVER_PORT : int = 5000 SERVER_RELOAD : bool = True # BACKEND_CORS_ORIGINS is a JSON - formatted list of origins # e . g : '[\"http://localhost\", \"http://localhost:4200\", \"http://localhost:3000\", \\ # \"http://localhost:8080\", \"http://local.dockertoolbox.tiangolo.com\"]' BACKEND_CORS_ORIGINS : List [ AnyHttpUrl ] = [] @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str, List[str ] ] ) -> Union [ List[str ] , str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ) : return [ i.strip() for i in v.split(\",\") ] elif isinstance ( v , ( list , str )) : return v raise ValueError ( v ) Ancestors (in MRO) pydantic.main.BaseModel pydantic.utils.Representation Class variables Config Static methods assemble_cors_origins def assemble_cors_origins ( v : Union [ str , List [ str ]] ) -> Union [ List [ str ], str ] View Source @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str, List[str ] ] ) -> Union [ List[str ] , str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ) : return [ i.strip() for i in v.split(\",\") ] elif isinstance ( v , ( list , str )) : return v raise ValueError ( v ) construct def construct ( _fields_set : Union [ ForwardRef ( 'SetStr' ), NoneType ] = None , ** values : Any ) -> 'Model' Creates a new model setting dict and fields_set from trusted or pre-validated data. Default values are respected, but no other validation is performed. from_orm def from_orm ( obj : Any ) -> 'Model' parse_file def parse_file ( path : Union [ str , pathlib . Path ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model' parse_obj def parse_obj ( obj : Any ) -> 'Model' parse_raw def parse_raw ( b : Union [ str , bytes ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model' schema def schema ( by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' ) -> 'DictStrAny' schema_json def schema_json ( * , by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' , ** dumps_kwargs : Any ) -> 'unicode' update_forward_refs def update_forward_refs ( ** localns : Any ) -> None Try to update ForwardRefs on fields based on this Model, globalns and localns. validate def validate ( value : Any ) -> 'Model' Instance variables fields Methods copy def copy ( self : 'Model' , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , update : 'DictStrAny' = None , deep : bool = False ) -> 'Model' Duplicate a model, optionally choose which fields to include, exclude and change. :param include: fields to include in new model :param exclude: fields to exclude from new model, as with values this takes precedence over include :param update: values to change/add in the new model. Note: the data is not validated before creating the new model: you should trust this data :param deep: set to True to make a deep copy of the model :return: new model instance dict def dict ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False ) -> 'DictStrAny' Generate a dictionary representation of the model, optionally specifying which fields to include or exclude. json def json ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False , encoder : Union [ Callable [[ Any ], Any ], NoneType ] = None , ** dumps_kwargs : Any ) -> 'unicode' Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . to_string def to_string ( self , pretty : bool = False ) -> 'unicode'","title":"Config"},{"location":"reference/portfolio_tracker/core/config/#module-portfolio_trackercoreconfig","text":"View Source from pydantic import BaseModel , AnyHttpUrl , validator from typing import List , Union import os from dotenv import dotenv_values class Settings ( BaseModel ): PRODUCTION_ENV : bool = False PROJECT_NAME : str = \"Python Baseline\" DEBUG : bool = True VERSION : str = \"v0.1.0\" API_V1_STR : str = \"/api/v1\" API_DOC : str = \"/api\" API_SWAGGER_URL : str = \"/api/swagger\" API_REDOC_URL : str = \"/api/redoc\" SERVER_HOST : str = \"0.0.0.0\" SERVER_PORT : int = 5000 SERVER_RELOAD : bool = True # BACKEND_CORS_ORIGINS is a JSON-formatted list of origins # e.g: '[\"http://localhost\", \"http://localhost:4200\", \"http://localhost:3000\", \\ # \"http://localhost:8080\", \"http://local.dockertoolbox.tiangolo.com\"]' BACKEND_CORS_ORIGINS : List [ AnyHttpUrl ] = [] @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str , List [ str ]]) -> Union [ List [ str ], str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ): return [ i . strip () for i in v . split ( \",\" )] elif isinstance ( v , ( list , str )): return v raise ValueError ( v ) def get_settings (): def check_debug (): if settings . PRODUCTION_ENV : return False return True config = { ** os . environ , ** dotenv_values ( \".env\" )} dev_env = [ \".env.development\" , \".env.local\" , \".env.development.local\" ] prod_env = [ \".env.production\" , \".env.local\" , \".env.production.local\" ] is_prod_env = config . get ( \"PRODUCTION_ENV\" , \"False\" ) == \"True\" for i in prod_env if is_prod_env else dev_env : config = { ** config , ** dotenv_values ( i )} settings = Settings ( ** config ) settings . DEBUG = check_debug () settings . SERVER_RELOAD = check_debug () return settings settings = get_settings () def set_env ( key : str , value : str ): os . environ [ key ] = value","title":"Module portfolio_tracker.core.config"},{"location":"reference/portfolio_tracker/core/config/#variables","text":"settings","title":"Variables"},{"location":"reference/portfolio_tracker/core/config/#functions","text":"","title":"Functions"},{"location":"reference/portfolio_tracker/core/config/#get_settings","text":"def get_settings ( ) View Source def get_settings (): def check_debug (): if settings . PRODUCTION_ENV : return False return True config = { ** os . environ , ** dotenv_values ( \".env\" ) } dev_env = [ \".env.development\" , \".env.local\" , \".env.development.local\" ] prod_env = [ \".env.production\" , \".env.local\" , \".env.production.local\" ] is_prod_env = config . get ( \"PRODUCTION_ENV\" , \"False\" ) == \"True\" for i in prod_env if is_prod_env else dev_env : config = { ** config , ** dotenv_values ( i ) } settings = Settings ( ** config ) settings . DEBUG = check_debug () settings . SERVER_RELOAD = check_debug () return settings","title":"get_settings"},{"location":"reference/portfolio_tracker/core/config/#set_env","text":"def set_env ( key : str , value : str ) View Source def set_env ( key : str , value : str ) : os . environ [ key ] = value","title":"set_env"},{"location":"reference/portfolio_tracker/core/config/#classes","text":"","title":"Classes"},{"location":"reference/portfolio_tracker/core/config/#settings","text":"class Settings ( __pydantic_self__ , ** data : Any ) View Source class Settings ( BaseModel ) : PRODUCTION_ENV : bool = False PROJECT_NAME : str = \"Python Baseline\" DEBUG : bool = True VERSION : str = \"v0.1.0\" API_V1_STR : str = \"/api/v1\" API_DOC : str = \"/api\" API_SWAGGER_URL : str = \"/api/swagger\" API_REDOC_URL : str = \"/api/redoc\" SERVER_HOST : str = \"0.0.0.0\" SERVER_PORT : int = 5000 SERVER_RELOAD : bool = True # BACKEND_CORS_ORIGINS is a JSON - formatted list of origins # e . g : '[\"http://localhost\", \"http://localhost:4200\", \"http://localhost:3000\", \\ # \"http://localhost:8080\", \"http://local.dockertoolbox.tiangolo.com\"]' BACKEND_CORS_ORIGINS : List [ AnyHttpUrl ] = [] @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str, List[str ] ] ) -> Union [ List[str ] , str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ) : return [ i.strip() for i in v.split(\",\") ] elif isinstance ( v , ( list , str )) : return v raise ValueError ( v )","title":"Settings"},{"location":"reference/portfolio_tracker/core/config/#ancestors-in-mro","text":"pydantic.main.BaseModel pydantic.utils.Representation","title":"Ancestors (in MRO)"},{"location":"reference/portfolio_tracker/core/config/#class-variables","text":"Config","title":"Class variables"},{"location":"reference/portfolio_tracker/core/config/#static-methods","text":"","title":"Static methods"},{"location":"reference/portfolio_tracker/core/config/#assemble_cors_origins","text":"def assemble_cors_origins ( v : Union [ str , List [ str ]] ) -> Union [ List [ str ], str ] View Source @validator ( \"BACKEND_CORS_ORIGINS\" , pre = True ) def assemble_cors_origins ( cls , v : Union [ str, List[str ] ] ) -> Union [ List[str ] , str ]: if isinstance ( v , str ) and not v . startswith ( \"[\" ) : return [ i.strip() for i in v.split(\",\") ] elif isinstance ( v , ( list , str )) : return v raise ValueError ( v )","title":"assemble_cors_origins"},{"location":"reference/portfolio_tracker/core/config/#construct","text":"def construct ( _fields_set : Union [ ForwardRef ( 'SetStr' ), NoneType ] = None , ** values : Any ) -> 'Model' Creates a new model setting dict and fields_set from trusted or pre-validated data. Default values are respected, but no other validation is performed.","title":"construct"},{"location":"reference/portfolio_tracker/core/config/#from_orm","text":"def from_orm ( obj : Any ) -> 'Model'","title":"from_orm"},{"location":"reference/portfolio_tracker/core/config/#parse_file","text":"def parse_file ( path : Union [ str , pathlib . Path ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model'","title":"parse_file"},{"location":"reference/portfolio_tracker/core/config/#parse_obj","text":"def parse_obj ( obj : Any ) -> 'Model'","title":"parse_obj"},{"location":"reference/portfolio_tracker/core/config/#parse_raw","text":"def parse_raw ( b : Union [ str , bytes ], * , content_type : 'unicode' = None , encoding : 'unicode' = 'utf8' , proto : pydantic . parse . Protocol = None , allow_pickle : bool = False ) -> 'Model'","title":"parse_raw"},{"location":"reference/portfolio_tracker/core/config/#schema","text":"def schema ( by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' ) -> 'DictStrAny'","title":"schema"},{"location":"reference/portfolio_tracker/core/config/#schema_json","text":"def schema_json ( * , by_alias : bool = True , ref_template : 'unicode' = '#/definitions/ {model} ' , ** dumps_kwargs : Any ) -> 'unicode'","title":"schema_json"},{"location":"reference/portfolio_tracker/core/config/#update_forward_refs","text":"def update_forward_refs ( ** localns : Any ) -> None Try to update ForwardRefs on fields based on this Model, globalns and localns.","title":"update_forward_refs"},{"location":"reference/portfolio_tracker/core/config/#validate","text":"def validate ( value : Any ) -> 'Model'","title":"validate"},{"location":"reference/portfolio_tracker/core/config/#instance-variables","text":"fields","title":"Instance variables"},{"location":"reference/portfolio_tracker/core/config/#methods","text":"","title":"Methods"},{"location":"reference/portfolio_tracker/core/config/#copy","text":"def copy ( self : 'Model' , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , update : 'DictStrAny' = None , deep : bool = False ) -> 'Model' Duplicate a model, optionally choose which fields to include, exclude and change. :param include: fields to include in new model :param exclude: fields to exclude from new model, as with values this takes precedence over include :param update: values to change/add in the new model. Note: the data is not validated before creating the new model: you should trust this data :param deep: set to True to make a deep copy of the model :return: new model instance","title":"copy"},{"location":"reference/portfolio_tracker/core/config/#dict","text":"def dict ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False ) -> 'DictStrAny' Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.","title":"dict"},{"location":"reference/portfolio_tracker/core/config/#json","text":"def json ( self , * , include : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , exclude : Union [ ForwardRef ( 'AbstractSetIntStr' ), ForwardRef ( 'MappingIntStrAny' )] = None , by_alias : bool = False , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = False , encoder : Union [ Callable [[ Any ], Any ], NoneType ] = None , ** dumps_kwargs : Any ) -> 'unicode' Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() .","title":"json"},{"location":"reference/portfolio_tracker/core/config/#to_string","text":"def to_string ( self , pretty : bool = False ) -> 'unicode'","title":"to_string"}]}